{"version":3,"sources":["store/constants/index.js","assets/Loader.gif","App.js","store/reducer/reducer.js","store/reducer/index.js","store/index.js","serviceWorker.js","index.js"],"names":["GAME_MODE","USER_INFO","module","exports","Home","React","lazy","User","Select","Game","App","Suspense","fallback","className","src","Loader","alt","TransitionGroup","CSSTransition","classNames","timeout","path","exact","component","defaultUserState","mode","userInfo","userReducer","state","action","type","payload","combineReducers","game","reducer","store","createStore","rootReducer","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAA,oEAAO,IAAMA,EAAY,YACZC,EAAY,a,mBCDzBC,EAAOC,QAAU,IAA0B,oC,4LCKrCC,EAAOC,IAAMC,MAAK,kBAAM,uDACxBC,EAAOF,IAAMC,MAAK,kBAAM,iCACxBE,EAASH,IAAMC,MAAK,kBAAM,iCAC1BG,EAAOJ,IAAMC,MAAK,kBAAM,8DA4BfI,MApBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SARpB,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAAQC,IAAI,aAQlB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAeC,WAAW,OAAOC,QAAS,KACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,aAAaE,UAAWnB,IACpC,kBAAC,IAAD,CAAOiB,KAAK,QAAQC,OAAK,EAACC,UAAWhB,IACrC,kBAAC,IAAD,CAAOc,KAAK,UAAUC,OAAK,EAACC,UAAWf,IACvC,kBAAC,IAAD,CAAOa,KAAK,QAAQC,OAAK,EAACC,UAAWd,U,+BCzB7Ce,EAAmB,CACvBC,KAAM,KACNC,SAAU,IAoBGC,EAjBK,WAAuC,IAAtCC,EAAqC,uDAA7BJ,EAAkBK,EAAW,uCACxD,OAAQA,EAAOC,MACb,KAAK9B,IACH,OAAO,eACF4B,EADL,CAEEH,KAAMI,EAAOE,UAEjB,KAAK9B,IACH,OAAO,eACF2B,EADL,CAEEF,SAAUG,EAAOE,UAErB,QACE,OAAOH,IChBEI,cAAgB,CAC7BC,KAAMC,ICMD,IAEQC,EAFMC,YAAYC,EAAaC,IAAe,WAAf,EAN1B,KCOAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,EAAD,QAGJY,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2ced095.chunk.js","sourcesContent":["export const GAME_MODE = \"GAME_MODE\";\nexport const USER_INFO = \"USER_INFO\";\n","module.exports = __webpack_public_path__ + \"static/media/Loader.baeaf0c7.gif\";","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Loader from \"./assets/Loader.gif\";\n\nconst Home = React.lazy(() => import(\"./pages/HomePage\"));\nconst User = React.lazy(() => import(\"./pages/UserPage\"));\nconst Select = React.lazy(() => import(\"./pages/SelectPage\"));\nconst Game = React.lazy(() => import(\"./pages/GamePage\"));\n\nconst loading = () => (\n  <div className=\"loader\">\n    <img src={Loader} alt=\"Loader\" />\n  </div>\n);\n\nfunction App() {\n  return (\n    <Router>\n      <React.Suspense fallback={loading()}>\n        <TransitionGroup>\n          <CSSTransition classNames=\"fade\" timeout={300}>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/tictactoe\" component={Home} />\n              <Route path=\"/user\" exact component={User} />\n              <Route path=\"/select\" exact component={Select} />\n              <Route path=\"/game\" exact component={Game} />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n      </React.Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","import { GAME_MODE, USER_INFO } from \"../constants\";\n\nconst defaultUserState = {\n  mode: null,\n  userInfo: {},\n};\n\nconst userReducer = (state = defaultUserState, action) => {\n  switch (action.type) {\n    case GAME_MODE:\n      return {\n        ...state,\n        mode: action.payload,\n      };\n    case USER_INFO:\n      return {\n        ...state,\n        userInfo: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\n\nimport reducer from \"./reducer\";\n\nexport default combineReducers({\n  game: reducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./reducer\";\n\n/* --> Can Push Thunks to Middleware but here is not required <-- */\nconst middlewares = [];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}